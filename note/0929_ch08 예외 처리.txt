ch08. 예외 처리

- 에러
    (1) 문법 에러 : 문법적으로 나타나는 에러(프로그램을 수정할 수 밖에 없음)
    (2) 실행 에러(실행 시 나는 에러)
        * 시스템 에러 : 프로그래머의 의지와 상관 없이 나타나는 에러
        * 예외 : 정상적으로 동작하는 프로그램에서 나타나는 에러(MILD한 에러)
1. 예외 처리의 필요성
예외가 날 가능성이 있는 부분에 대해서 미리 예상하고 그에 대한 처리를 프로그래밍 하는 것 (필요한 이유 : 좀 더 안정적인 시스템 구축)
  ex1. 파일을 다룰 때 파일이 없거나 쓰기 금지거나 파일 인코딩 방법으로 인한 오류
  ex2. 데이터베이스(DB) 프로그래밍 시 제약 조건등에 의한 CRUD(Create, Read, Update, Delete) 명령 수행 오류. DBMS 서버 오류
  ex3. 네트워크 프로그래밍 시 네트워크 연결 오류
  ex4. 리스트나 튜플의 인덱스를 벗어난 참조에 의한 오류

2. try~except로 예외 처리
2.1.try~except
try:
    예외가 발생할 가능성이 있는 명령어들
except:
    예외가 발생할 경우 실행할 명령어들

2.2.지정된 예외 처리
try:
    예외가 발생할 수도 있는 명령어
except (예외 타입1, 예외 타입3):
    해당 예외가 발생할 경우 실행할 명령어
except 예외 타입2:
    해당 예외가 발생할 경우 실행할 명령어

예외 타입이 상이한 경우 에러 발생

2.3.예외 인수(e)
try:
    예외가 발생할 수도 있는 명령어
except 예외타입 as e:
    print(e) # print(e.__str__())
  # print(e.args[0]) # 예외 메세지 출력

3. raise
강제로 예외를 발생시킴

4. 추상 클래스
추상 클래스 : 추상 메소드가 1개 이상 포함된 클래스
추상 메소드 : 호출할 수 없는 메소드. 상속받은 클래스에서 재정의를 강요
Python에서 추상 메소드 @abstractmethod 혹은 raise를 사용

5. 파일 정리 작업(with절 사용)