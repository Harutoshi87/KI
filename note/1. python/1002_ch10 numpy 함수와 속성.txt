Numpy Package의 함수와 속성

- 배열 속성 함수
	dtype : 요소들의 type (data type) (타입 변경 시 astype(타입))
	itemsize : 요소들의 byte 사이즈
	ndim : 차원 수(축의 수) (number of dimensions)
	size : 요소 개수
	shape : 배열의 구조(tuple)
	reshape : 배열의 구조 변환

- 배열 생성 함수
	np.array(obj, dtype, copy=T/F)
	
	기본값이 있는 배열 생성 함수
	np.zeros(tuple, dtype) : 요소들이 다 0
	np.ones(tuple, dtype) : 요소들이 다 1
	np.full(tuple, 기본값) : 요소들이 다 두번째 매개변수(==기본값)
	np.empty(tuple, 기본값, dtype) : 초기 내용은 임의 값인 배열(메모리 상태에 따라 초기값 달라짐)
	※ 위의 함수를 이용해서 생성된 배열은 기본 dtype이 float64 (dtype 속성 따로 지정 가능)
	
	랜덤값을 갖는 배열 만들기
	np.random.random(tuple) : 0부터 1미만의 균등분포(같은 확률)를 갖는 n차원 랜덤값 배열 발생
	np.random.uniform(low=0.0, high=1.0, size=tuple) : low부터 high미만의 균등분포를 갖는 n차원의 랜덤값 배열 발생
	np.random.normal(loc=0.0, scale=1.0, size=tuple) : 평균loc과 표준편차 scale을 갖는 n차원의 정규준포 랜덤값 배열 발생
	np.random.rand(n) : 0부터 1미만의 균등분포를 갖는 1차원 배열 발생(난수 1개)
	np.random.randn(n) : 표준정규분포를 갖는 1차원 배열 발생 (평균0, 표준편차1)
	
	연속된 값을 갖는 1차원 배열 만들기
	np.arange(from, to, by, dtype) : from부터 to 앞까지 by씩 건너뛴 값을 1차원 배열로 생성
	np.linspace(from, to, num) : from부터 to까지(to 포함) num개 숫자들을 1차원 배열로 생성

- 배열 차원 변경
	reshape(행수, 열수) : -1 가능
	resize(행수, 열수) : -1 불가!
	T, transpose() : 전치행렬로 변환
	ravel(), flatten() : 1차원으로 변경

- 배열 연산
	요소별 연산, 행렬곱(@/dot, 단위행렬 np.eye()), 집계 함수(sum, min, max, mean, var, std)
	범용 함수(np.add, np.multiply, ...), broadcasting

- 배열 합치기
	np.vstack(tup)
	np.hstack(tup)
	np.dstack(tup) : 열끼리 합침(차원 증가)

	np.column_stack(tup) : 1차원 배열을 열 단위로 2차원 배열로 합침
	np.row_stack(tup) : 행 단위로 합침 (==vstack)
	np.stack(tup, axis)
	r_[a, b, c] : 행 단위로 쌓음(한 행으로 합침)
	c_[a, b, c] : 열 단위로 쌓음(1차원을 2차원으로)
	1차원 배열[: , newaxis] == 1차원 배열.reshape(-1,1) == np.expend_dims(a, axis=1)
		->> 1차원 배열을 2차원 열 벡터로

- 배열 분리하기
	vsplit(ary, indices_or_sections) : 첫번째 축을 따라 분할
	hsplit(ary, indices_or_sections) : 두번째 축을 따라 분할
	dsplit(ary, indices_or_sections) : 3차원에서 세번째 축을 따라 분할
	split(ary, indices_or_sections, axis=?)
	array_split(ary, indices_or_sections, axis=?) : 나눠지지 않는 정수로도 split 가능

- 선형대수 
	2차원 numpy 배열은 행렬
	행렬의 곱 : @
	단위행렬 : np.eye(n) : n행 n열의 단위행렬이 만들어짐
	a의 역행렬 @ a = 단위행렬
	전치행렬 : X.T, X.transpose() x행 y열 ->> y행 x열
	역행렬 : np.linalg.inv(X)